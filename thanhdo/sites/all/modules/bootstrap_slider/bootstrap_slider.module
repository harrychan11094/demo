<?php

/**
 * @file
 * Primarily Drupal hooks.
 */

/**
 * Implements hook_requirements().
 */
function bootstrap_slider_requirements($phase) {
  // Create an array to hold Bootstrap Slider requirements
  $requirements = array();

  // Check requirements during the runtime phase
  if ($phase == 'runtime') {
    // Check if the Bootstrap Slider jQuery plugin library is installed
    if (($library = libraries_detect('bootstrap-slider')) && !empty($library['installed'])) {
      $requirements['bootstrap_slider_library'] = array(
        'title' => t('Bootstrap 3 jQuery plugin'),
        'value' => t('Installed'),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $requirements['bootstrap_slider_library'] = array(
        'title' => t('Bootstrap 3 jQuery plugin'),
        'value' => t('Not installed'),
        'description' => $library['error message'],
        'severity' => REQUIREMENT_ERROR,
      );
    }
    // Check if the site is running >= jQuery 1.7
    if (($library = drupal_get_library('system', 'jquery')) && $library['version'] >= 1.7) {
      $requirements['bootstrap_slider_jquery'] = array(
        'title' => t('Bootstrap Slider jQuery version'),
        'value' => t('jQuery @version', array('@version' => $library['version'])),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $destination = drupal_get_destination();

      $requirements['bootstrap_slider_jquery'] = array(
        'title' => t('Bootstrap Slider jQuery version'),
        'value' => t('jQuery @version', array('@version' => $library['version'])),
        'description' => t('Bootstrap Slider requires jQuery 1.7 or greater. Configure <a href="@jquery_update">jQuery Update</a>.', array('@jquery_update' => url('admin/config/development/jquery_update', array('query' => $destination)))),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_permission().
 */
function bootstrap_slider_permission() {
  return array(
    'administer bootstrap slider' => array(
      'title' => t('Administer Bootstrap Slider'),
      'description' => t('Allows a user to configure Bootstrap Slider.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function bootstrap_slider_theme($existing, $type, $theme, $path) {
  return array(
    'bootstrap_slider_slider' => array(
      'variables' => array(
        'slides' => NULL,
      ),
      'file' => 'bootstrap_slider.theme.inc',
      'path' => $path . '/themes',
      'template' => 'bootstrap-slider-slider',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function bootstrap_slider_libraries_info() {
  $libraries['bootstrap-slider'] = array(
    'name' => 'Bootstrap',
    'vendor url' => 'http://getbootstrap.com/',
    'download url' => 'https://github.com/twbs/bootstrap/releases',
    'version arguments' => array(
      'file' => 'js/bootstrap.js',
      // 3.x: Bootstrap v3.0.1
      'pattern' => '/Bootstrap v(\d+\.+\d+\.+\d+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'js/bootstrap.js',
      ),
      'css' => array(
        'css/bootstrap.css',
      ),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_menu().
 */
function bootstrap_slider_menu() {
  $items['admin/structure/bootstrap-slider'] = array(
    'title' => 'Bootstrap Slider',
    'description' => 'Configure slider content and options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_slider_slide_configuration_form'),
    'access arguments' => array('administer bootstrap slider'),
    'file' => 'bootstrap_slider_slides.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/bootstrap-slider/slides'] = array(
    'title' => 'Slides',
    'description' => 'Configure slider content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_slider_slide_configuration_form'),
    'access arguments' => array('administer bootstrap slider'),
    'file' => 'bootstrap_slider_slides.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/structure/bootstrap-slider/options'] = array(
    'title' => 'Options',
    'description' => 'Configure slider options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_slider_option_configuration_form'),
    'access arguments' => array('administer bootstrap slider'),
    'file' => 'bootstrap_slider_options.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function bootstrap_slider_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#element']['#block']) && $element['#element']['#block']->delta == 'bootstrap_slider') {
    $element['#links']['slides'] = array(
      'title' => t('Configure slider slides'),
      'href' => 'admin/structure/bootstrap-slider/slides',
    );
    $element['#links']['options'] = array(
      'title' => t('Configure slider options'),
      'href' => 'admin/structure/bootstrap-slider/options',
    );
  }
}

/**
 * Get Slider settings.
 *
 * @param <bool> $all
 *    Return all slides or only active.
 *
 * @return <array>
 *    Settings information
 */
function bootstrap_slider_get_slides($all = TRUE) {
  // Get all slides
  $slides = variable_get('bootstrap_slider_slide_settings', array());

  // Create list of slide to return
  $slides_value = array();
  foreach ($slides as $slide) {
  if ($all || $slide['image_published']) {
    // Add weight param to use `drupal_sort_weight`
    $slide['weight'] = $slide['image_weight'];
    $slides_value[] = $slide;
  }
  }

  // Sort image by weight
  usort($slides_value, 'drupal_sort_weight');

  return $slides_value;
}

/**
 * Set slide settings.
 *
 * @param <array> $value
 *    Settings to save
 */
function bootstrap_slider_set_slides($value) {
  variable_set('bootstrap_slider_slide_settings', $value);
}

/**
 * Implements hook_block_info().
 */
function bootstrap_slider_block_info() {
  $blocks['bootstrap_slider'] = array(
    'info' => t('Bootstrap Slider'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bootstrap_slider_block_view($delta = '') {
  switch ($delta) {
    case 'bootstrap_slider':
      $block['content'] = array(
        '#type' => 'markup',
        '#theme' => 'bootstrap_slider_slider',
        '#attached' => array(
          'libraries_load' => array(
            array('bootstrap-slider'),
          ),
          'js' => array(
            array(
              'data' => drupal_get_path('module', 'bootstrap_slider') . '/js/bootstrap_slider.js',
              'type' => 'file',
            ),
            array(
              'data' => array(
                'bootstrap_slider' => array(
                  'effectTime' => check_plain(variable_get('bb_slideshow_effect_time', '5000')),
                ),
              ),
              'type' => 'setting',
            ),
          ),
          'css' => array(
            array(
              'data' => drupal_get_path('module', 'bootstrap_slider') . '/css/bootstrap_slider.css',
              'type' => 'file',
            ),
          ),
        ),
      );

      // Add the theme's resources
      foreach (array('js', 'css') as $type) {
        if (!empty($theme['resources'][$type])) {
          foreach ($theme['resources'][$type] as $file_path) {
            $block['content']['#attached'][$type][] = $file_path;
          }
        }
      }
      break;
  }

  return $block;
}
